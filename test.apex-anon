     Map<String, Schema.SObjectField> contactFieldSetMap = Schema.getGlobalDescribe().get('Contact').getDescribe().fields.getMap();
 List<Contact_Rule_Account_Junction__c> ruleList = [
            SELECT Contact_Assignment_Rule__r.Operator__c, Contact_Assignment_Rule__r.Field_Value__c, 
                Contact_Assignment_Rule__r.Field_API__c, Account__c 
            FROM Contact_Rule_Account_Junction__c 
        ];

Account accountRecordItem = [SELECT Id FROM Account WHERE Id='0017F00000PJAtMQAX'];

List<Contact_Assignment_Rule__c> rulesForAccount = getRulesForAccount(ruleList, accountRecordItem);



    private List<Contact_Assignment_Rule__c> getRulesForAccount(List<Contact_Rule_Account_Junction__c> ruleList, Account currentAccount) {
        List<Contact_Assignment_Rule__c> rulesForCurrentAccount = new List<Contact_Assignment_Rule__c>();
        Id currentAccountId = currentAccount.Id;

        for (Contact_Rule_Account_Junction__c ruleItem : ruleList) {
            if (currentAccountId == ruleItem.Account__c) {
                rulesForCurrentAccount.add(new Contact_Assignment_Rule__c(
                    Operator__c = ruleItem.Contact_Assignment_Rule__r.Operator__c,
                    Field_Value__c = ruleItem.Contact_Assignment_Rule__r.Field_Value__c, 
                    Field_API__c = ruleItem.Contact_Assignment_Rule__r.Field_API__c
                    ));
            }
        }

        return rulesForCurrentAccount;
    }

 private Boolean isContactMatchesRules(Contact contactItem, List<Contact_Assignment_Rule__c> ruleList) {
        for (Contact_Assignment_Rule__c ruleItem : ruleList) {
            String fieldName = ruleItem.Field_API__c;
            String operator = ruleItem.Operator__c;
            String fieldValue = ruleItem.Field_Value__c;
            Object contFieldValue = contactItem.get(fieldName);
            Schema.DisplayType typeOfField = contactFieldSetMap.get(fieldName).getDescribe().getType();
            if (isFieldMatchRule(typeOfField, fieldValue, contFieldValue, operator) == false) {
                return false;
            }
        }

        return true;
}

    // private Boolean isValuesCompareCorrect(String )
    private Boolean isFieldMatchRule(Schema.DisplayType typeOfField, String fieldValue, Object contFieldValue, String operator) {
        switch on typeOfField {
            when Boolean {
                if (operator == '>') {
                    return Boolean.valueOf(fieldValue) != Boolean.valueOf(contFieldValue);
                }
                else if (operator == '=') {
                    return Boolean.valueOf(fieldValue) == Boolean.valueOf(contFieldValue);
                }
                else if (operator == '<') {
                    return Boolean.valueOf(fieldValue) != Boolean.valueOf(contFieldValue);
                }
            }
            when Integer {
                if (operator == '>') {
                    return Integer.valueOf(fieldValue) > Integer.valueOf(contFieldValue);
                }
                else if (operator == '=') {
                    return Integer.valueOf(fieldValue) == Integer.valueOf(contFieldValue);
                }
                else if (operator == '<') {
                    return Integer.valueOf(fieldValue) < Integer.valueOf(contFieldValue);
                }
            }
            when Long {
                if (operator == '>') {
                    return Double.valueOf(fieldValue) > Double.valueOf(contFieldValue);
                }
                else if (operator == '=') {
                    return Double.valueOf(fieldValue) == Double.valueOf(contFieldValue);
                }
                else if (operator == '<') {
                    return Double.valueOf(fieldValue) < Double.valueOf(contFieldValue);
                }
            }
            when CURRENCY {
                if (operator == '>') {
                    return Double.valueOf(fieldValue) > Double.valueOf(contFieldValue);
                }
                else if (operator == '=') {
                    return Double.valueOf(fieldValue) == Double.valueOf(contFieldValue);
                }
                else if (operator == '<') {
                    return Double.valueOf(fieldValue) < Double.valueOf(contFieldValue);
                }
            }
            when String {
                if (operator == '>') {
                    return String.valueOf(fieldValue) > String.valueOf(contFieldValue);
                }
                else if (operator == '=') {
                    return String.valueOf(fieldValue) == String.valueOf(contFieldValue);
                }
                else if (operator == '<') {
                    return String.valueOf(fieldValue) < String.valueOf(contFieldValue);
                }
            }
            when Double {
                if (operator == '>') {
                    return Double.valueOf(fieldValue) > Double.valueOf(contFieldValue);
                }
                else if (operator == '=') {
                    return Double.valueOf(fieldValue) == Double.valueOf(contFieldValue);
                }
                else if (operator == '<') {
                    return Double.valueOf(fieldValue) < Double.valueOf(contFieldValue);
                }
            }
            when Date {
                if (operator == '>') {
                    return Date.valueOf(fieldValue) > Date.valueOf(contFieldValue);
                }
                else if (operator == '=') {
                    return Date.valueOf(fieldValue) == Date.valueOf(contFieldValue);
                }
                else if (operator == '<') {
                    return Date.valueOf(fieldValue) < Date.valueOf(contFieldValue);
                }
            }
            when Datetime {
                if (operator == '>') {
                    return Datetime.valueOf(fieldValue) > Datetime.valueOf(contFieldValue);
                }
                else if (operator == '=') {
                    return Datetime.valueOf(fieldValue) == Datetime.valueOf(contFieldValue);
                }
                else if (operator == '<') {
                    return Datetime.valueOf(fieldValue) < Datetime.valueOf(contFieldValue);
                }
            }
            when Time {
                if (operator == '>') {
                    return Datetime.valueOf(fieldValue) > Datetime.valueOf(contFieldValue);
                }
                else if (operator == '=') {
                    return Datetime.valueOf(fieldValue) == Datetime.valueOf(contFieldValue);
                }
                else if (operator == '<') {
                    return Datetime.valueOf(fieldValue) < Datetime.valueOf(contFieldValue);
                }
            }
            when else {
                return false;
            }
        }
        return false;
    }


List<Contact> contactList = Database.query('SELECT accountId, Amount__c FROM Contact WHERE ' + getAllConditions(ruleList));


    private String getAllConditions(List<Contact_Rule_Account_Junction__c> ruleList) {
        String conditionString = '';

        for (Contact_Rule_Account_Junction__c ruleItem : ruleList) {
            conditionString += getCondition(ruleItem) + ' OR';
        }

        return conditionString.substring(0, conditionString.length() - 2);
    }

    private String getCondition(Contact_Rule_Account_Junction__c ruleItem) {
        String conditionString = '';

        conditionString += ruleItem.Contact_Assignment_Rule__r.Field_API__c
        + ruleItem.Contact_Assignment_Rule__r.Operator__c
        + 
        (isQuotesNeed(ruleItem.Contact_Assignment_Rule__r.Field_API__c)
        ? '\''+ ruleItem.Contact_Assignment_Rule__r.Field_Value__c + '\''
        : ruleItem.Contact_Assignment_Rule__r.Field_Value__c);

        return conditionString;
    }

        private Boolean isQuotesNeed(String fieldName) {
        Schema.DisplayType type = contactFieldSetMap.get(fieldName).getDescribe().getType();

        switch on type {
            when Boolean, Integer, Long, Currency {
                return false;
            }
            when else {
                return true;
            }
        }
    }


List<Contact> trueContacts = new List<Contact>();

for (Contact cont : contactList) {
  System.debug(cont.get('Amount__c'));
  if (isContactMatchesRules(cont, rulesForAccount)) {
    trueContacts.add(cont);
  }
}

// for (Contact trueContactItem : trueContacts) {
//   System.debug(trueContactItem);
// }